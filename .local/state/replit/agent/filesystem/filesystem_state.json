{"file_contents":{"README.md":{"content":"# GenAiHack2025","size_bytes":15},"design_guidelines.md":{"content":"# Trip Planner App Design Guidelines\n\n## Design Approach\n**Selected Approach**: Hybrid approach combining Airbnb's travel-focused visual design with Material Design's structured UI components for the planning interface.\n\n**Justification**: This travel app requires both emotional engagement (destination discovery) and functional efficiency (itinerary planning), necessitating a balance between visual appeal and utility.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors (Dark/Light Mode)**:\n- Primary Brand: 220 85% 45% / 220 85% 65% (Deep travel blue)\n- Secondary: 200 70% 35% / 200 70% 55% (Ocean teal)\n- Background: 220 15% 8% / 0 0% 98% (Dark slate / Light gray)\n- Surface: 220 10% 12% / 0 0% 100% (Card backgrounds)\n\n**Accent Colors**:\n- Success: 140 65% 45% (Booking confirmations)\n- Warning: 35 85% 55% (Weather alerts)\n- Accent: 280 60% 60% (AI suggestions, sparingly used)\n\n**Gradients**: Subtle blue-to-teal gradients for hero sections and AI-powered features. Deep blue to ocean teal for destination cards and call-to-action backgrounds.\n\n### Typography\n- **Primary**: Inter (Google Fonts) - Clean, readable for UI text\n- **Headings**: Poppins (Google Fonts) - Friendly, approachable for destination names\n- **Sizes**: Text-sm (14px), text-base (16px), text-lg (18px), text-xl (20px), text-2xl (24px)\n\n### Layout System\n**Spacing Primitives**: Consistent use of Tailwind units 2, 4, 6, 8, 12, 16\n- Micro spacing: p-2, m-2 (8px)\n- Standard spacing: p-4, m-4 (16px) \n- Section spacing: p-8, m-8 (32px)\n- Large spacing: p-12, m-12 (48px)\n\n### Component Library\n\n**Navigation**: \n- Top navigation with destination search bar as primary element\n- Sticky secondary navigation for itinerary sections during planning\n\n**Core Components**:\n- Destination cards with gradient overlays and mood badges\n- AI suggestion panels with subtle accent color borders\n- Interactive timeline for itinerary display\n- Weather forecast cards with icon integration\n- Budget breakdown components with progress indicators\n\n**Forms**:\n- Floating label inputs for trip preferences\n- Multi-select mood chips for AI planning\n- Date range pickers with calendar visualization\n- Group member invitation interface\n\n**Data Display**:\n- Interactive maps integration for route visualization\n- Cost breakdown tables with category icons\n- Activity timeline with time-distance optimization display\n- Weather forecast widgets with 3-day preview\n\n**Overlays**:\n- Booking confirmation modals with payment integration\n- AI suggestion popover with Plan B alternatives\n- Collaborative voting interface for group decisions\n- Offline download progress indicators\n\n### Images\n**Hero Section**: Large destination imagery (1200x600px) with gradient overlay and search interface positioned over blurred background buttons for booking CTAs.\n\n**Destination Cards**: Medium-sized images (400x250px) with mood-based color overlays indicating trip type (adventure, culture, relaxation).\n\n**Activity Thumbnails**: Small square images (120x120px) for itinerary items with time and cost overlays.\n\n### Visual Hierarchy\n- Large hero search as primary focal point\n- AI-powered suggestions highlighted with accent color borders\n- Itinerary timeline as central planning interface\n- Cost information prominently displayed but not overwhelming\n- Weather integration seamlessly embedded in planning flow\n\n### Interactive Elements\n- Smooth transitions between planning steps\n- Hover states for destination exploration\n- Real-time updates for collaborative planning\n- Responsive feedback for AI processing states\n- One-click booking with clear visual confirmation flow","size_bytes":3620},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        travel: {\n          ocean: \"200 70% 35%\",\n          sky: \"220 85% 45%\",\n          success: \"140 65% 45%\",\n          warning: \"35 85% 55%\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4208},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/ai-service.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\n// Trip planner AI service using Gemini\nconst ai = new GoogleGenAI({ apiKey: process.env.GOOGLE_AI_API_KEY || \"\" });\n\nexport interface TripPreferences {\n  destination: string;\n  duration: number; // days\n  moods: string[]; // relax, adventure, culture, discovery\n  budget?: number;\n  startDate?: string;\n  endDate?: string;\n}\n\nexport interface Activity {\n  id: string;\n  time: string;\n  title: string;\n  location: string;\n  duration: string;\n  cost: number;\n  type: string;\n  description: string;\n}\n\nexport interface ItineraryDay {\n  day: number;\n  date: string;\n  activities: Activity[];\n  totalCost: number;\n}\n\nexport interface GeneratedItinerary {\n  destination: string;\n  totalBudget: number;\n  days: ItineraryDay[];\n  weatherOptimized: boolean;\n  moodMatched: string[];\n}\n\nexport async function generatePersonalizedItinerary(preferences: TripPreferences): Promise<GeneratedItinerary> {\n  try {\n    const moodDescriptions = {\n      relax: \"peaceful, spa treatments, wellness activities, slow-paced experiences, nature walks, meditation\",\n      adventure: \"thrilling activities, outdoor sports, hiking, trekking, adrenaline-pumping experiences\",\n      culture: \"historical sites, museums, local traditions, authentic food experiences, art galleries, cultural tours\",\n      discovery: \"hidden gems, off-the-beaten-path locations, local experiences, unique attractions, secret spots\"\n    };\n\n    const selectedMoodDescriptions = preferences.moods.map(mood => moodDescriptions[mood as keyof typeof moodDescriptions]).join(\", \");\n\n    const systemPrompt = `You are an expert travel planner AI. Create detailed, personalized itineraries based on traveler preferences. \nFocus on authentic experiences, optimal timing, and budget consciousness.\n\nRequirements:\n- Generate realistic activities with accurate timing and costs\n- Match activities to specified moods: ${selectedMoodDescriptions}\n- Include variety in each day (culture, food, activities)\n- Provide specific locations and descriptions\n- Ensure activities are logically sequenced by time and location\n- Include realistic travel times between activities\n- Balance indoor/outdoor activities based on typical weather patterns`;\n\n    const prompt = `Create a detailed ${preferences.duration}-day itinerary for ${preferences.destination}.\n\nTravel Preferences:\n- Duration: ${preferences.duration} days\n- Mood preferences: ${preferences.moods.join(\", \")}\n- Budget range: ${preferences.budget ? `$${preferences.budget}` : \"moderate budget\"}\n- Travel dates: ${preferences.startDate || \"flexible dates\"}\n\nPlease create a detailed itinerary with:\n1. Daily schedule with specific times\n2. Activity names, locations, and descriptions\n3. Estimated costs for each activity\n4. Duration for each activity\n5. Activity types (Culture, Adventure, Food, Relaxation, etc.)\n6. Total daily costs\n\nFormat the response as JSON with this structure:\n{\n  \"destination\": \"${preferences.destination}\",\n  \"totalBudget\": number,\n  \"days\": [\n    {\n      \"day\": 1,\n      \"date\": \"Date string\",\n      \"activities\": [\n        {\n          \"id\": \"unique_id\",\n          \"time\": \"9:00 AM\",\n          \"title\": \"Activity Name\",\n          \"location\": \"Specific Location\",\n          \"duration\": \"2 hours\",\n          \"cost\": 25,\n          \"type\": \"Culture\",\n          \"description\": \"Detailed description\"\n        }\n      ],\n      \"totalCost\": number\n    }\n  ],\n  \"weatherOptimized\": true,\n  \"moodMatched\": [\"mood1\", \"mood2\"]\n}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    \n    if (!rawJson) {\n      throw new Error(\"Empty response from AI model\");\n    }\n\n    const itinerary: GeneratedItinerary = JSON.parse(rawJson);\n    \n    // Validate the response structure\n    if (!itinerary.days || !Array.isArray(itinerary.days)) {\n      throw new Error(\"Invalid itinerary structure returned from AI\");\n    }\n\n    // Ensure each activity has a unique ID\n    itinerary.days.forEach((day, dayIndex) => {\n      day.activities.forEach((activity, activityIndex) => {\n        if (!activity.id) {\n          activity.id = `day${dayIndex + 1}_activity${activityIndex + 1}`;\n        }\n      });\n    });\n\n    return itinerary;\n\n  } catch (error) {\n    console.error(\"Failed to generate itinerary:\", error);\n    \n    // Fallback itinerary if AI fails\n    return generateFallbackItinerary(preferences);\n  }\n}\n\nfunction generateFallbackItinerary(preferences: TripPreferences): GeneratedItinerary {\n  const fallbackDays: ItineraryDay[] = [];\n  \n  for (let day = 1; day <= preferences.duration; day++) {\n    const activities: Activity[] = [\n      {\n        id: `day${day}_morning`,\n        time: \"9:00 AM\",\n        title: `${preferences.destination} Exploration`,\n        location: preferences.destination,\n        duration: \"3 hours\",\n        cost: 50,\n        type: preferences.moods[0] || \"Culture\",\n        description: `Discover the highlights of ${preferences.destination} with a focus on ${preferences.moods.join(\" and \")} experiences.`\n      },\n      {\n        id: `day${day}_afternoon`,\n        time: \"2:00 PM\", \n        title: \"Local Cuisine Experience\",\n        location: `Traditional Restaurant in ${preferences.destination}`,\n        duration: \"1.5 hours\",\n        cost: 35,\n        type: \"Food\",\n        description: \"Enjoy authentic local dishes and regional specialties.\"\n      }\n    ];\n\n    fallbackDays.push({\n      day,\n      date: `Day ${day}`,\n      activities,\n      totalCost: activities.reduce((sum, activity) => sum + activity.cost, 0)\n    });\n  }\n\n  return {\n    destination: preferences.destination,\n    totalBudget: fallbackDays.reduce((sum, day) => sum + day.totalCost, 0),\n    days: fallbackDays,\n    weatherOptimized: false,\n    moodMatched: preferences.moods\n  };\n}\n\nexport async function generatePlanBSuggestions(\n  originalActivity: Activity, \n  reason: string\n): Promise<Activity[]> {\n  try {\n    const systemPrompt = `You are a travel assistant providing alternative activity suggestions. \nWhen travelers face issues like weather, closures, or delays, suggest 3 nearby alternatives.`;\n\n    const prompt = `The original activity \"${originalActivity.title}\" at ${originalActivity.location} cannot proceed due to: ${reason}\n\nPlease suggest 3 alternative activities in the same area with similar duration and cost range.\nConsider the time of day (${originalActivity.time}) and activity type (${originalActivity.type}).\n\nFormat as JSON array:\n[\n  {\n    \"id\": \"alt_1\",\n    \"time\": \"${originalActivity.time}\",\n    \"title\": \"Alternative Activity Name\",\n    \"location\": \"Nearby Location\",\n    \"duration\": \"${originalActivity.duration}\",\n    \"cost\": ${originalActivity.cost},\n    \"type\": \"${originalActivity.type}\",\n    \"description\": \"Why this is a good alternative\"\n  }\n]`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (!rawJson) {\n      return [];\n    }\n\n    return JSON.parse(rawJson);\n  } catch (error) {\n    console.error(\"Failed to generate Plan B suggestions:\", error);\n    return [];\n  }\n}","size_bytes":7372},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { generatePersonalizedItinerary, generatePlanBSuggestions } from \"./ai-service\";\nimport { insertTripSchema, insertItinerarySchema, insertBookingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Trip planning routes\n  \n  // Create a new trip\n  app.post(\"/api/trips\", async (req, res) => {\n    try {\n      const tripData = insertTripSchema.parse(req.body);\n      const trip = await storage.createTrip(tripData);\n      res.json(trip);\n    } catch (error) {\n      console.error(\"Error creating trip:\", error);\n      res.status(400).json({ error: \"Invalid trip data\" });\n    }\n  });\n\n  // Get a specific trip\n  app.get(\"/api/trips/:id\", async (req, res) => {\n    try {\n      const trip = await storage.getTrip(req.params.id);\n      if (!trip) {\n        return res.status(404).json({ error: \"Trip not found\" });\n      }\n      res.json(trip);\n    } catch (error) {\n      console.error(\"Error fetching trip:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get trip itineraries\n  app.get(\"/api/trips/:id/itineraries\", async (req, res) => {\n    try {\n      const itineraries = await storage.getTripItineraries(req.params.id);\n      res.json(itineraries);\n    } catch (error) {\n      console.error(\"Error fetching itineraries:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // AI-powered itinerary generation\n  app.post(\"/api/trips/:id/generate-itinerary\", async (req, res) => {\n    try {\n      const trip = await storage.getTrip(req.params.id);\n      if (!trip) {\n        return res.status(404).json({ error: \"Trip not found\" });\n      }\n\n      // Generate AI itinerary\n      const aiItinerary = await generatePersonalizedItinerary({\n        destination: trip.destination,\n        duration: trip.duration,\n        moods: trip.moods,\n        budget: trip.budget ? parseFloat(trip.budget) : undefined,\n        startDate: trip.startDate || undefined,\n        endDate: trip.endDate || undefined,\n      });\n\n      // Save generated itinerary to storage\n      const savedItineraries = [];\n      for (const day of aiItinerary.days) {\n        const itinerary = await storage.createItinerary({\n          tripId: trip.id,\n          day: day.day,\n          date: day.date,\n          activities: day.activities as any, // JSONB field\n          totalCost: day.totalCost.toString(),\n        });\n        savedItineraries.push(itinerary);\n      }\n\n      // Update trip budget\n      await storage.updateTrip(trip.id, {\n        budget: aiItinerary.totalBudget.toString(),\n      });\n\n      res.json({\n        trip: await storage.getTrip(trip.id),\n        itineraries: savedItineraries,\n        aiGenerated: true,\n        weatherOptimized: aiItinerary.weatherOptimized,\n        moodMatched: aiItinerary.moodMatched,\n      });\n    } catch (error) {\n      console.error(\"Error generating itinerary:\", error);\n      res.status(500).json({ error: \"Failed to generate itinerary\" });\n    }\n  });\n\n  // Generate Plan B suggestions for activities\n  app.post(\"/api/activities/plan-b\", async (req, res) => {\n    try {\n      const { activity, reason } = req.body;\n      \n      if (!activity || !reason) {\n        return res.status(400).json({ error: \"Activity and reason are required\" });\n      }\n\n      const suggestions = await generatePlanBSuggestions(activity, reason);\n      res.json({ suggestions });\n    } catch (error) {\n      console.error(\"Error generating Plan B:\", error);\n      res.status(500).json({ error: \"Failed to generate alternative suggestions\" });\n    }\n  });\n\n  // Destination search autocomplete endpoint\n  app.get(\"/api/destinations/search\", async (req, res) => {\n    try {\n      const { query } = req.query;\n      if (!query || typeof query !== \"string\" || query.length < 2) {\n        return res.json({ suggestions: [] });\n      }\n\n      // Use OpenStreetMap Nominatim for free geocoding (respecting usage policy)\n      const encodedQuery = encodeURIComponent(query);\n      const nominatimUrl = `https://nominatim.openstreetmap.org/search?q=${encodedQuery}&format=json&limit=5&addressdetails=1&countrycodes=&featureType=city`;\n      \n      try {\n        const response = await fetch(nominatimUrl, {\n          headers: {\n            'User-Agent': 'TripCraft-AI-Planner/1.0'\n          }\n        });\n        \n        if (!response.ok) {\n          throw new Error('Geocoding service unavailable');\n        }\n        \n        const data = await response.json();\n        \n        const suggestions = data.map((item: any) => {\n          const address = item.address || {};\n          let displayName = '';\n          \n          if (address.city || address.town || address.village) {\n            displayName = address.city || address.town || address.village;\n            if (address.country) {\n              displayName += `, ${address.country}`;\n            }\n          } else {\n            // Fallback to display_name but clean it up\n            displayName = item.display_name.split(',').slice(0, 2).join(', ');\n          }\n          \n          return {\n            name: displayName,\n            fullName: item.display_name,\n            lat: parseFloat(item.lat),\n            lon: parseFloat(item.lon),\n            type: item.type || 'city'\n          };\n        }).filter((item: any) => item.name && item.name.length > 0);\n\n        res.json({ suggestions });\n      } catch (error) {\n        console.error('Geocoding API error:', error);\n        // Fallback to enhanced mock data if geocoding fails\n        const fallbackSuggestions = [\n          { name: \"Paris, France\", fullName: \"Paris, Île-de-France, France\", lat: 48.8566, lon: 2.3522, type: \"city\" },\n          { name: \"Tokyo, Japan\", fullName: \"Tokyo, Japan\", lat: 35.6762, lon: 139.6503, type: \"city\" },\n          { name: \"New York, USA\", fullName: \"New York, New York, United States\", lat: 40.7128, lon: -74.0060, type: \"city\" },\n          { name: \"London, England\", fullName: \"London, England, United Kingdom\", lat: 51.5074, lon: -0.1278, type: \"city\" },\n          { name: \"Rome, Italy\", fullName: \"Rome, Lazio, Italy\", lat: 41.9028, lon: 12.4964, type: \"city\" },\n          { name: \"Barcelona, Spain\", fullName: \"Barcelona, Catalonia, Spain\", lat: 41.3851, lon: 2.1734, type: \"city\" },\n          { name: \"Mumbai, India\", fullName: \"Mumbai, Maharashtra, India\", lat: 19.0760, lon: 72.8777, type: \"city\" },\n          { name: \"Sydney, Australia\", fullName: \"Sydney, New South Wales, Australia\", lat: -33.8688, lon: 151.2093, type: \"city\" }\n        ].filter(item => item.name.toLowerCase().includes(query.toLowerCase()));\n        \n        res.json({ suggestions: fallbackSuggestions });\n      }\n    } catch (error) {\n      console.error(\"Error in destination search:\", error);\n      res.status(500).json({ error: \"Failed to search destinations\" });\n    }\n  });\n\n  // Weather-based travel date suggestions with AI scoring\n  app.get(\"/api/destinations/:destination/best-dates\", async (req, res) => {\n    try {\n      const { destination } = req.params;\n      const { duration = 7 } = req.query;\n\n      if (!process.env.WEATHER_API_KEY) {\n        // Fallback to enhanced mock data if no API key\n        const mockWeatherSuggestions = [\n          {\n            dateRange: \"Sep 15-17\",\n            condition: \"Mostly Sunny\",\n            temperature: 24,\n            score: 95,\n            description: \"Perfect weather conditions for outdoor activities\"\n          },\n          {\n            dateRange: \"Sep 20-22\",\n            condition: \"Partly Cloudy\", \n            temperature: 22,\n            score: 85,\n            description: \"Good weather with occasional clouds\"\n          },\n          {\n            dateRange: \"Sep 25-27\",\n            condition: \"Light Rain\",\n            temperature: 19,\n            score: 65,\n            description: \"Some rain expected, better for indoor activities\"\n          }\n        ];\n\n        return res.json({\n          destination,\n          duration: parseInt(duration as string),\n          recommendations: mockWeatherSuggestions,\n          generated: new Date().toISOString(),\n          source: \"mock\"\n        });\n      }\n\n      // Get weather forecast from WeatherAPI.com\n      const weatherApiUrl = `https://api.weatherapi.com/v1/forecast.json?key=${process.env.WEATHER_API_KEY}&q=${encodeURIComponent(destination)}&days=14&aqi=no&alerts=no`;\n      \n      try {\n        const weatherResponse = await fetch(weatherApiUrl);\n        if (!weatherResponse.ok) {\n          throw new Error(`Weather API error: ${weatherResponse.status}`);\n        }\n        \n        const weatherData = await weatherResponse.json();\n        const forecast = weatherData.forecast?.forecastday || [];\n        \n        // Generate 3-day windows with AI scoring algorithm\n        const recommendations = [];\n        for (let i = 0; i <= forecast.length - 3; i++) {\n          const window = forecast.slice(i, i + 3);\n          const score = calculateWeatherScore(window);\n          const startDate = new Date(window[0].date);\n          const endDate = new Date(window[2].date);\n          \n          recommendations.push({\n            dateRange: `${formatDateRange(startDate)} - ${formatDateRange(endDate)}`,\n            condition: getMostSignificantCondition(window),\n            temperature: Math.round(window.reduce((sum, day) => sum + day.day.avgtemp_c, 0) / 3),\n            score: Math.round(score),\n            description: generateWeatherDescription(window, score)\n          });\n        }\n        \n        // Sort by score (best first) and take top 3\n        recommendations.sort((a, b) => b.score - a.score);\n        const topRecommendations = recommendations.slice(0, 3);\n\n        res.json({\n          destination: weatherData.location?.name || destination,\n          duration: parseInt(duration as string),\n          recommendations: topRecommendations,\n          generated: new Date().toISOString(),\n          source: \"weatherapi\"\n        });\n      } catch (error) {\n        console.error('WeatherAPI error:', error);\n        // Fallback to mock data on API failure\n        const fallbackSuggestions = [\n          {\n            dateRange: \"Oct 15-17\",\n            condition: \"Partly Sunny\",\n            temperature: 22,\n            score: 85,\n            description: \"Generally good weather expected\"\n          },\n          {\n            dateRange: \"Oct 20-22\",\n            condition: \"Mostly Cloudy\", \n            temperature: 20,\n            score: 70,\n            description: \"Overcast but mild conditions\"\n          },\n          {\n            dateRange: \"Oct 25-27\",\n            condition: \"Light Showers\",\n            temperature: 18,\n            score: 60,\n            description: \"Some rain possible, plan indoor activities\"\n          }\n        ];\n\n        res.json({\n          destination,\n          duration: parseInt(duration as string),\n          recommendations: fallbackSuggestions,\n          generated: new Date().toISOString(),\n          source: \"fallback\"\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching weather suggestions:\", error);\n      res.status(500).json({ error: \"Failed to fetch weather data\" });\n    }\n  });\n\n  // Helper functions for weather scoring\n  function calculateWeatherScore(threeDayWindow: any[]): number {\n    let score = 100;\n    \n    for (const day of threeDayWindow) {\n      const dayData = day.day;\n      \n      // Temperature scoring (20-25°C is optimal)\n      const temp = dayData.avgtemp_c;\n      if (temp < 10 || temp > 35) score -= 20;\n      else if (temp < 15 || temp > 30) score -= 10;\n      else if (temp >= 20 && temp <= 25) score += 5;\n      \n      // Precipitation scoring\n      const rainMm = dayData.totalprecip_mm || 0;\n      if (rainMm > 20) score -= 25;\n      else if (rainMm > 10) score -= 15;\n      else if (rainMm > 5) score -= 8;\n      else if (rainMm < 1) score += 5;\n      \n      // Wind scoring\n      const windKph = dayData.maxwind_kph || 0;\n      if (windKph > 50) score -= 20;\n      else if (windKph > 30) score -= 10;\n      else if (windKph < 15) score += 3;\n      \n      // Humidity scoring\n      const humidity = dayData.avghumidity || 50;\n      if (humidity > 80) score -= 10;\n      else if (humidity < 30) score -= 5;\n      \n      // UV Index scoring (moderate UV is good)\n      const uvIndex = dayData.uv || 5;\n      if (uvIndex > 10) score -= 10;\n      else if (uvIndex >= 3 && uvIndex <= 7) score += 3;\n    }\n    \n    return Math.max(0, Math.min(100, score));\n  }\n\n  function getMostSignificantCondition(window: any[]): string {\n    const conditions = window.map(day => day.day.condition.text);\n    // Return the most concerning condition or the first one\n    for (const condition of conditions) {\n      if (condition.toLowerCase().includes('rain') || \n          condition.toLowerCase().includes('storm') ||\n          condition.toLowerCase().includes('snow')) {\n        return condition;\n      }\n    }\n    return conditions[0] || 'Variable';\n  }\n\n  function generateWeatherDescription(window: any[], score: number): string {\n    const avgTemp = window.reduce((sum, day) => sum + day.day.avgtemp_c, 0) / 3;\n    const totalRain = window.reduce((sum, day) => sum + (day.day.totalprecip_mm || 0), 0);\n    \n    if (score >= 90) {\n      return \"Excellent weather conditions for all outdoor activities\";\n    } else if (score >= 75) {\n      return totalRain > 5 ? \"Good weather with occasional light rain\" : \"Generally pleasant conditions\";\n    } else if (score >= 60) {\n      return totalRain > 15 ? \"Moderate rain expected, mix of indoor/outdoor activities\" : \"Average weather conditions\";\n    } else {\n      return totalRain > 20 ? \"Significant rain likely, focus on indoor attractions\" : \"Challenging weather conditions\";\n    }\n  }\n\n  function formatDateRange(date: Date): string {\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  }\n\n  // Booking endpoints\n  app.post(\"/api/trips/:id/bookings\", async (req, res) => {\n    try {\n      const trip = await storage.getTrip(req.params.id);\n      if (!trip) {\n        return res.status(404).json({ error: \"Trip not found\" });\n      }\n\n      const bookingData = insertBookingSchema.parse({\n        ...req.body,\n        tripId: req.params.id,\n      });\n\n      const booking = await storage.createBooking(bookingData);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      res.status(400).json({ error: \"Invalid booking data\" });\n    }\n  });\n\n  // Get trip bookings\n  app.get(\"/api/trips/:id/bookings\", async (req, res) => {\n    try {\n      const bookings = await storage.getTripBookings(req.params.id);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update booking status\n  app.patch(\"/api/bookings/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (!status) {\n        return res.status(400).json({ error: \"Status is required\" });\n      }\n\n      const booking = await storage.updateBookingStatus(req.params.id, status);\n      if (!booking) {\n        return res.status(404).json({ error: \"Booking not found\" });\n      }\n\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error updating booking status:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15637},"server/storage.ts":{"content":"import { type User, type InsertUser, type Trip, type InsertTrip, type Itinerary, type InsertItinerary, type Booking, type InsertBooking } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Storage interface for trip planner functionality\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Trip methods\n  createTrip(trip: InsertTrip): Promise<Trip>;\n  getTrip(id: string): Promise<Trip | undefined>;\n  getUserTrips(userId: string): Promise<Trip[]>;\n  updateTrip(id: string, trip: Partial<InsertTrip>): Promise<Trip | undefined>;\n  \n  // Itinerary methods\n  createItinerary(itinerary: InsertItinerary): Promise<Itinerary>;\n  getTripItineraries(tripId: string): Promise<Itinerary[]>;\n  updateItinerary(id: string, itinerary: Partial<InsertItinerary>): Promise<Itinerary | undefined>;\n  \n  // Booking methods\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  getTripBookings(tripId: string): Promise<Booking[]>;\n  updateBookingStatus(id: string, status: string): Promise<Booking | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private trips: Map<string, Trip>;\n  private itineraries: Map<string, Itinerary>;\n  private bookings: Map<string, Booking>;\n\n  constructor() {\n    this.users = new Map();\n    this.trips = new Map();\n    this.itineraries = new Map();\n    this.bookings = new Map();\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Trip methods\n  async createTrip(insertTrip: InsertTrip): Promise<Trip> {\n    const id = randomUUID();\n    const now = new Date();\n    const trip: Trip = { \n      ...insertTrip, \n      id,\n      userId: null, // Will be set when user auth is implemented\n      createdAt: now,\n      updatedAt: now\n    };\n    this.trips.set(id, trip);\n    return trip;\n  }\n\n  async getTrip(id: string): Promise<Trip | undefined> {\n    return this.trips.get(id);\n  }\n\n  async getUserTrips(userId: string): Promise<Trip[]> {\n    return Array.from(this.trips.values()).filter(trip => trip.userId === userId);\n  }\n\n  async updateTrip(id: string, updates: Partial<InsertTrip>): Promise<Trip | undefined> {\n    const existing = this.trips.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Trip = { \n      ...existing, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.trips.set(id, updated);\n    return updated;\n  }\n\n  // Itinerary methods\n  async createItinerary(insertItinerary: InsertItinerary): Promise<Itinerary> {\n    const id = randomUUID();\n    const itinerary: Itinerary = { \n      ...insertItinerary, \n      id,\n      createdAt: new Date()\n    };\n    this.itineraries.set(id, itinerary);\n    return itinerary;\n  }\n\n  async getTripItineraries(tripId: string): Promise<Itinerary[]> {\n    return Array.from(this.itineraries.values())\n      .filter(itinerary => itinerary.tripId === tripId)\n      .sort((a, b) => a.day - b.day);\n  }\n\n  async updateItinerary(id: string, updates: Partial<InsertItinerary>): Promise<Itinerary | undefined> {\n    const existing = this.itineraries.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Itinerary = { ...existing, ...updates };\n    this.itineraries.set(id, updated);\n    return updated;\n  }\n\n  // Booking methods\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const id = randomUUID();\n    const booking: Booking = { \n      ...insertBooking, \n      id,\n      status: insertBooking.status || \"pending\",\n      bookedAt: new Date()\n    };\n    this.bookings.set(id, booking);\n    return booking;\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    return this.bookings.get(id);\n  }\n\n  async getTripBookings(tripId: string): Promise<Booking[]> {\n    return Array.from(this.bookings.values()).filter(booking => booking.tripId === tripId);\n  }\n\n  async updateBookingStatus(id: string, status: string): Promise<Booking | undefined> {\n    const existing = this.bookings.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Booking = { ...existing, status };\n    this.bookings.set(id, updated);\n    return updated;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":4765},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, decimal, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const trips = pgTable(\"trips\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  destination: text(\"destination\").notNull(),\n  duration: integer(\"duration\").notNull(), // days\n  moods: text(\"moods\").array().notNull(), // travel moods\n  budget: decimal(\"budget\", { precision: 10, scale: 2 }),\n  startDate: text(\"start_date\"),\n  endDate: text(\"end_date\"),\n  status: text(\"status\").notNull().default(\"planning\"), // planning, booked, completed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const itineraries = pgTable(\"itineraries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tripId: varchar(\"trip_id\").references(() => trips.id).notNull(),\n  day: integer(\"day\").notNull(),\n  date: text(\"date\").notNull(),\n  activities: jsonb(\"activities\").notNull(), // array of activity objects\n  totalCost: decimal(\"total_cost\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tripId: varchar(\"trip_id\").references(() => trips.id).notNull(),\n  stripePaymentIntentId: text(\"stripe_payment_intent_id\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, cancelled\n  bookedAt: timestamp(\"booked_at\").defaultNow(),\n});\n\n// Schema exports for forms\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertTripSchema = createInsertSchema(trips).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertItinerarySchema = createInsertSchema(itineraries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  bookedAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Trip = typeof trips.$inferSelect;\nexport type InsertTrip = z.infer<typeof insertTripSchema>;\nexport type Itinerary = typeof itineraries.$inferSelect;\nexport type InsertItinerary = z.infer<typeof insertItinerarySchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n","size_bytes":2903},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 15% 15%;\n\n  --border: 220 8% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 15% 15%;\n\n  --card-border: 220 8% 92%;\n\n  --sidebar: 220 5% 95%;\n\n  --sidebar-foreground: 220 15% 15%;\n\n  --sidebar-border: 220 8% 88%;\n\n  --sidebar-primary: 220 85% 45%;\n\n  --sidebar-primary-foreground: 220 85% 98%;\n\n  --sidebar-accent: 220 8% 88%;\n\n  --sidebar-accent-foreground: 220 15% 25%;\n\n  --sidebar-ring: 220 85% 45%;\n\n  --popover: 220 5% 92%;\n\n  --popover-foreground: 220 15% 15%;\n\n  --popover-border: 220 8% 85%;\n\n  --primary: 220 85% 45%;\n\n  --primary-foreground: 220 85% 98%;\n\n  --secondary: 220 8% 85%;\n\n  --secondary-foreground: 220 15% 25%;\n\n  --muted: 220 5% 90%;\n\n  --muted-foreground: 220 15% 45%;\n\n  --accent: 280 60% 88%;\n\n  --accent-foreground: 280 60% 25%;\n\n  --destructive: 0 85% 45%;\n\n  --destructive-foreground: 0 85% 98%;\n\n  --input: 220 15% 75%;\n  --ring: 220 85% 45%;\n  --chart-1: 220 85% 35%;\n  --chart-2: 200 70% 35%;\n  --chart-3: 140 65% 35%;\n  --chart-4: 35 85% 45%;\n  --chart-5: 280 60% 45%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Poppins, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 15% 15% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 15% 15% / 0.03);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 15% 15% / 0.04), 0px 1px 2px -1px hsl(220 15% 15% / 0.05);\n  --shadow: 0px 2px 0px 0px hsl(220 15% 15% / 0.05), 0px 1px 2px -1px hsl(220 15% 15% / 0.06);\n  --shadow-md: 0px 2px 0px 0px hsl(220 15% 15% / 0.06), 0px 2px 4px -1px hsl(220 15% 15% / 0.07);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 15% 15% / 0.08), 0px 4px 6px -1px hsl(220 15% 15% / 0.09);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 15% 15% / 0.10), 0px 8px 10px -1px hsl(220 15% 15% / 0.11);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 15% 15% / 0.12);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 220 15% 88%;\n\n  --border: 220 10% 18%;\n\n  --card: 220 10% 12%;\n\n  --card-foreground: 220 15% 88%;\n\n  --card-border: 220 10% 22%;\n\n  --sidebar: 220 8% 15%;\n\n  --sidebar-foreground: 220 15% 88%;\n\n  --sidebar-border: 220 10% 25%;\n\n  --sidebar-primary: 220 85% 65%;\n\n  --sidebar-primary-foreground: 220 85% 8%;\n\n  --sidebar-accent: 220 10% 22%;\n\n  --sidebar-accent-foreground: 220 15% 75%;\n\n  --sidebar-ring: 220 85% 65%;\n\n  --popover: 220 8% 18%;\n\n  --popover-foreground: 220 15% 88%;\n\n  --popover-border: 220 10% 28%;\n\n  --primary: 220 85% 55%;\n\n  --primary-foreground: 220 85% 8%;\n\n  --secondary: 220 10% 25%;\n\n  --secondary-foreground: 220 15% 75%;\n\n  --muted: 220 8% 20%;\n\n  --muted-foreground: 220 15% 65%;\n\n  --accent: 280 60% 25%;\n\n  --accent-foreground: 280 60% 75%;\n\n  --destructive: 0 85% 35%;\n\n  --destructive-foreground: 0 85% 95%;\n\n  --input: 220 15% 35%;\n  --ring: 220 85% 65%;\n  --chart-1: 220 85% 65%;\n  --chart-2: 200 70% 55%;\n  --chart-3: 140 65% 55%;\n  --chart-4: 35 85% 65%;\n  --chart-5: 280 60% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 15% 2% / 0.15);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 15% 2% / 0.20);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 15% 2% / 0.25), 0px 1px 2px -1px hsl(220 15% 2% / 0.30);\n  --shadow: 0px 2px 0px 0px hsl(220 15% 2% / 0.30), 0px 1px 2px -1px hsl(220 15% 2% / 0.35);\n  --shadow-md: 0px 2px 0px 0px hsl(220 15% 2% / 0.35), 0px 2px 4px -1px hsl(220 15% 2% / 0.40);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 15% 2% / 0.40), 0px 4px 6px -1px hsl(220 15% 2% / 0.45);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 15% 2% / 0.45), 0px 8px 10px -1px hsl(220 15% 2% / 0.50);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 15% 2% / 0.50);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9836},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/DestinationCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, Star, Clock } from \"lucide-react\";\n\ninterface DestinationCardProps {\n  id: string;\n  name: string;\n  image: string;\n  description: string;\n  rating: number;\n  duration: string;\n  price: number;\n  mood: string;\n  onClick: (id: string) => void;\n}\n\nexport function DestinationCard({ \n  id, \n  name, \n  image, \n  description, \n  rating, \n  duration, \n  price, \n  mood, \n  onClick \n}: DestinationCardProps) {\n  const getMoodColor = (mood: string) => {\n    switch (mood.toLowerCase()) {\n      case \"culture\":\n        return \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\";\n      case \"adventure\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case \"relax\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      default:\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n    }\n  };\n\n  return (\n    <Card className=\"overflow-hidden hover-elevate cursor-pointer\" onClick={() => onClick(id)} data-testid={`destination-card-${id}`}>\n      <div className=\"relative\">\n        <img \n          src={image} \n          alt={name}\n          className=\"w-full h-48 object-cover\"\n        />\n        <div className=\"absolute top-3 left-3\">\n          <Badge className={getMoodColor(mood)}>\n            {mood}\n          </Badge>\n        </div>\n        <div className=\"absolute top-3 right-3 bg-black/50 backdrop-blur-sm text-white px-2 py-1 rounded-md text-sm font-medium\">\n          ${price}\n        </div>\n      </div>\n      \n      <div className=\"p-4 space-y-3\">\n        <div>\n          <h3 className=\"font-semibold text-lg\">{name}</h3>\n          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n            <MapPin className=\"h-3 w-3\" />\n            Travel destination\n          </div>\n        </div>\n        \n        <p className=\"text-sm text-muted-foreground line-clamp-2\">\n          {description}\n        </p>\n        \n        <div className=\"flex items-center justify-between pt-2\">\n          <div className=\"flex items-center gap-4 text-sm\">\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n              <span className=\"font-medium\">{rating}</span>\n            </div>\n            <div className=\"flex items-center gap-1 text-muted-foreground\">\n              <Clock className=\"h-4 w-4\" />\n              <span>{duration}</span>\n            </div>\n          </div>\n          \n          <Button size=\"sm\" onClick={(e) => {\n            e.stopPropagation();\n            onClick(id);\n            console.log(\"Destination selected:\", name);\n          }}>\n            Explore\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":2918},"client/src/components/DestinationSearch.tsx":{"content":"import { Search, MapPin, Loader2 } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { searchDestinations } from \"@/lib/api\";\n\ninterface DestinationSearchProps {\n  onDestinationSelect: (destination: string) => void;\n}\n\nexport function DestinationSearch({ onDestinationSelect }: DestinationSearchProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const debounceTimer = useRef<NodeJS.Timeout>();\n\n  // Debounce search query to avoid excessive API calls\n  useEffect(() => {\n    if (debounceTimer.current) {\n      clearTimeout(debounceTimer.current);\n    }\n    \n    debounceTimer.current = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, 300);\n    \n    return () => {\n      if (debounceTimer.current) {\n        clearTimeout(debounceTimer.current);\n      }\n    };\n  }, [searchQuery]);\n\n  // Fetch real destination suggestions\n  const { data: searchResults, isLoading } = useQuery({\n    queryKey: [\"destinations\", debouncedQuery],\n    queryFn: () => searchDestinations(debouncedQuery),\n    enabled: debouncedQuery.length >= 2,\n    staleTime: 300000, // Cache results for 5 minutes\n  });\n\n  const suggestions = searchResults?.suggestions || [];\n\n  const handleDestinationClick = (suggestion: any) => {\n    setSearchQuery(suggestion.name);\n    setShowSuggestions(false);\n    onDestinationSelect(suggestion.name);\n    console.log(\"Destination selected:\", suggestion.name);\n  };\n\n  return (\n    <div className=\"relative w-full max-w-md\">\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n        <Input\n          type=\"text\"\n          placeholder=\"Where do you want to go?\"\n          value={searchQuery}\n          onChange={(e) => {\n            setSearchQuery(e.target.value);\n            setShowSuggestions(e.target.value.length > 0);\n          }}\n          onFocus={() => setShowSuggestions(searchQuery.length > 0)}\n          className=\"pl-10 pr-4\"\n          data-testid=\"input-destination-search\"\n        />\n      </div>\n\n      {showSuggestions && (isLoading || suggestions.length > 0) && (\n        <Card className=\"absolute z-50 w-full mt-1 p-2 max-h-64 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-4\">\n              <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n              <span className=\"text-sm text-muted-foreground\">Searching destinations...</span>\n            </div>\n          ) : (\n            suggestions.map((suggestion: any, index: number) => (\n              <Button\n                key={index}\n                variant=\"ghost\"\n                className=\"w-full justify-start p-2 h-auto\"\n                onClick={() => handleDestinationClick(suggestion)}\n                data-testid={`button-destination-${index}`}\n              >\n                <MapPin className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">{suggestion.name}</div>\n                  {suggestion.fullName !== suggestion.name && (\n                    <div className=\"text-xs text-muted-foreground truncate\">\n                      {suggestion.fullName}\n                    </div>\n                  )}\n                </div>\n              </Button>\n            ))\n          )}\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":3715},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sparkles, Zap, Globe } from \"lucide-react\";\nimport { DestinationSearch } from \"./DestinationSearch\";\nimport heroImage from \"@assets/generated_images/Travel_destination_hero_image_34af79f1.png\";\n\ninterface HeroSectionProps {\n  onGetStarted: (destination: string) => void;\n}\n\nexport function HeroSection({ onGetStarted }: HeroSectionProps) {\n  return (\n    <div className=\"relative min-h-[80vh] flex items-center justify-center\">\n      {/* Background Image with Overlay */}\n      <div className=\"absolute inset-0 z-0\">\n        <img \n          src={heroImage} \n          alt=\"Beautiful travel destination\" \n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-r from-black/60 via-black/40 to-black/60\" />\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 text-center max-w-4xl mx-auto px-6 text-white\">\n        <div className=\"space-y-6\">\n          {/* AI Badge */}\n          <div className=\"flex justify-center\">\n            <Badge className=\"bg-white/20 text-white border-white/30 backdrop-blur-sm\">\n              <Sparkles className=\"h-3 w-3 mr-1\" />\n              Powered by AI\n            </Badge>\n          </div>\n\n          {/* Main Heading */}\n          <div className=\"space-y-4\">\n            <h1 className=\"text-4xl md:text-6xl font-bold leading-tight\">\n              Plan Your Perfect Trip with\n              <span className=\"block text-transparent bg-gradient-to-r from-blue-400 to-cyan-400 bg-clip-text\">\n                AI Intelligence\n              </span>\n            </h1>\n            <p className=\"text-xl md:text-2xl text-gray-200 max-w-2xl mx-auto\">\n              Create personalized itineraries based on your mood, budget, and real-time conditions. \n              Book everything with one click.\n            </p>\n          </div>\n\n          {/* Features */}\n          <div className=\"flex flex-wrap justify-center gap-4 text-sm\">\n            <div className=\"flex items-center gap-2 bg-white/10 backdrop-blur-sm px-3 py-2 rounded-full\">\n              <Zap className=\"h-4 w-4 text-yellow-400\" />\n              Mood-Based Planning\n            </div>\n            <div className=\"flex items-center gap-2 bg-white/10 backdrop-blur-sm px-3 py-2 rounded-full\">\n              <Globe className=\"h-4 w-4 text-blue-400\" />\n              Real-Time Optimization\n            </div>\n            <div className=\"flex items-center gap-2 bg-white/10 backdrop-blur-sm px-3 py-2 rounded-full\">\n              <Sparkles className=\"h-4 w-4 text-purple-400\" />\n              One-Click Booking\n            </div>\n          </div>\n\n          {/* Search */}\n          <div className=\"space-y-4\">\n            <DestinationSearch onDestinationSelect={onGetStarted} />\n            <p className=\"text-sm text-gray-300\">\n              Start planning your dream trip in seconds\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3030},"client/src/components/ItineraryDisplay.tsx":{"content":"import { MapPin, Clock, DollarSign, Users, Calendar } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface ItineraryActivity {\n  id: string;\n  time: string;\n  title: string;\n  location: string;\n  duration: string;\n  cost: number;\n  type: string;\n  description: string;\n}\n\ninterface ItineraryDay {\n  day: number;\n  date: string;\n  activities: ItineraryActivity[];\n  totalCost: number;\n}\n\ninterface ItineraryDisplayProps {\n  destination: string;\n  days: ItineraryDay[];\n  totalBudget: number;\n  onBookNow: () => void;\n  onModifyItinerary: () => void;\n}\n\nexport function ItineraryDisplay({ \n  destination, \n  days, \n  totalBudget, \n  onBookNow, \n  onModifyItinerary \n}: ItineraryDisplayProps) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">Your {destination} Itinerary</h2>\n            <p className=\"text-muted-foreground\">AI-crafted journey for {days.length} days</p>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-2xl font-bold text-primary\">${totalBudget}</div>\n            <p className=\"text-sm text-muted-foreground\">Total Budget</p>\n          </div>\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button onClick={onBookNow} data-testid=\"button-book-now\">\n            <DollarSign className=\"h-4 w-4 mr-2\" />\n            Book Now\n          </Button>\n          <Button variant=\"outline\" onClick={onModifyItinerary} data-testid=\"button-modify-itinerary\">\n            Modify Itinerary\n          </Button>\n        </div>\n      </div>\n\n      <Separator />\n\n      {/* Days Timeline */}\n      <div className=\"space-y-6\">\n        {days.map((day) => (\n          <Card key={day.day} className=\"p-6\" data-testid={`day-${day.day}`}>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold\">\n                    {day.day}\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">Day {day.day}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{day.date}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-semibold\">${day.totalCost}</div>\n                  <p className=\"text-xs text-muted-foreground\">Daily budget</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                {day.activities.map((activity) => (\n                  <div key={activity.id} className=\"flex gap-4 p-4 rounded-md bg-muted/30 hover-elevate\">\n                    <div className=\"flex-shrink-0 text-center min-w-[60px]\">\n                      <div className=\"text-sm font-medium\">{activity.time}</div>\n                      <div className=\"text-xs text-muted-foreground\">{activity.duration}</div>\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between gap-4\">\n                        <div>\n                          <h4 className=\"font-medium\">{activity.title}</h4>\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground mt-1\">\n                            <MapPin className=\"h-3 w-3\" />\n                            {activity.location}\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mt-2\">\n                            {activity.description}\n                          </p>\n                        </div>\n                        \n                        <div className=\"text-right flex-shrink-0\">\n                          <div className=\"font-medium\">${activity.cost}</div>\n                          <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                            {activity.type}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {/* Cost Breakdown */}\n      <Card className=\"p-6\">\n        <h3 className=\"font-semibold mb-4\">Cost Breakdown</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n          <div>\n            <div className=\"text-lg font-bold text-blue-600\">${Math.round(totalBudget * 0.4)}</div>\n            <div className=\"text-xs text-muted-foreground\">Accommodation</div>\n          </div>\n          <div>\n            <div className=\"text-lg font-bold text-green-600\">${Math.round(totalBudget * 0.3)}</div>\n            <div className=\"text-xs text-muted-foreground\">Activities</div>\n          </div>\n          <div>\n            <div className=\"text-lg font-bold text-orange-600\">${Math.round(totalBudget * 0.2)}</div>\n            <div className=\"text-xs text-muted-foreground\">Food</div>\n          </div>\n          <div>\n            <div className=\"text-lg font-bold text-purple-600\">${Math.round(totalBudget * 0.1)}</div>\n            <div className=\"text-xs text-muted-foreground\">Transport</div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}","size_bytes":5637},"client/src/components/MoodSelector.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Sparkles, Mountain, Building2, Heart } from \"lucide-react\";\n\ninterface MoodOption {\n  id: string;\n  label: string;\n  description: string;\n  icon: React.ReactNode;\n  color: string;\n}\n\ninterface MoodSelectorProps {\n  selectedMoods: string[];\n  onMoodToggle: (moodId: string) => void;\n}\n\nexport function MoodSelector({ selectedMoods, onMoodToggle }: MoodSelectorProps) {\n  const moodOptions: MoodOption[] = [\n    {\n      id: \"relax\",\n      label: \"Relax & Recharge\",\n      description: \"Spa retreats, slow itineraries, nature walks\",\n      icon: <Heart className=\"h-4 w-4\" />,\n      color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\"\n    },\n    {\n      id: \"adventure\",\n      label: \"Adventure Mode\",\n      description: \"Trekking, water sports, hidden trails\",\n      icon: <Mountain className=\"h-4 w-4\" />,\n      color: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\"\n    },\n    {\n      id: \"culture\",\n      label: \"Culture Deep Dive\",\n      description: \"Local food, history tours, traditional stays\",\n      icon: <Building2 className=\"h-4 w-4\" />,\n      color: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\"\n    },\n    {\n      id: \"discovery\",\n      label: \"Hidden Gems\",\n      description: \"Off-the-beaten-path, local experiences\",\n      icon: <Sparkles className=\"h-4 w-4\" />,\n      color: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold\">What's your travel mood?</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {moodOptions.map((mood) => {\n          const isSelected = selectedMoods.includes(mood.id);\n          return (\n            <div\n              key={mood.id}\n              className={`p-4 rounded-md border cursor-pointer transition-all hover-elevate ${\n                isSelected \n                  ? \"border-primary bg-primary/5\" \n                  : \"border-border\"\n              }`}\n              onClick={() => onMoodToggle(mood.id)}\n              data-testid={`mood-option-${mood.id}`}\n            >\n              <div className=\"flex items-start gap-3\">\n                <div className={`p-2 rounded-md ${mood.color}`}>\n                  {mood.icon}\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2\">\n                    <h4 className=\"font-medium\">{mood.label}</h4>\n                    {isSelected && (\n                      <Badge variant=\"default\" className=\"text-xs\">\n                        Selected\n                      </Badge>\n                    )}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {mood.description}\n                  </p>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":2991},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const initial = stored || (prefersDark ? \"dark\" : \"light\");\n    setTheme(initial);\n    document.documentElement.classList.toggle(\"dark\", initial === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-4 w-4\" />\n      ) : (\n        <Sun className=\"h-4 w-4\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1108},"client/src/components/TripDurationPicker.tsx":{"content":"import { CalendarDays, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\n\ninterface TripDurationPickerProps {\n  duration: number;\n  onDurationChange: (days: number) => void;\n}\n\nexport function TripDurationPicker({ duration, onDurationChange }: TripDurationPickerProps) {\n  const [customDays, setCustomDays] = useState(\"\");\n\n  const presetDurations = [\n    { days: 3, label: \"Weekend\", subtitle: \"3 days\" },\n    { days: 7, label: \"One Week\", subtitle: \"7 days\" },\n    { days: 14, label: \"Two Weeks\", subtitle: \"14 days\" },\n    { days: 21, label: \"Extended\", subtitle: \"21 days\" }\n  ];\n\n  const handleCustomDuration = () => {\n    const days = parseInt(customDays);\n    if (days > 0 && days <= 365) {\n      onDurationChange(days);\n      console.log(\"Custom duration set:\", days, \"days\");\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-2\">\n        <CalendarDays className=\"h-5 w-5 text-primary\" />\n        <h3 className=\"text-lg font-semibold\">How long is your trip?</h3>\n      </div>\n      \n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n        {presetDurations.map((preset) => (\n          <Card\n            key={preset.days}\n            className={`p-4 cursor-pointer transition-all hover-elevate ${\n              duration === preset.days \n                ? \"border-primary bg-primary/5\" \n                : \"border-border\"\n            }`}\n            onClick={() => {\n              onDurationChange(preset.days);\n              console.log(\"Duration selected:\", preset.days, \"days\");\n            }}\n            data-testid={`duration-preset-${preset.days}`}\n          >\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              </div>\n              <h4 className=\"font-medium\">{preset.label}</h4>\n              <p className=\"text-sm text-muted-foreground\">{preset.subtitle}</p>\n              {duration === preset.days && (\n                <Badge variant=\"default\" className=\"mt-2 text-xs\">\n                  Selected\n                </Badge>\n              )}\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      <Card className=\"p-4\">\n        <div className=\"space-y-3\">\n          <h4 className=\"font-medium\">Custom Duration</h4>\n          <div className=\"flex gap-2\">\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"365\"\n              placeholder=\"Enter days\"\n              value={customDays}\n              onChange={(e) => setCustomDays(e.target.value)}\n              className=\"flex-1 px-3 py-2 border border-border rounded-md text-sm\"\n              data-testid=\"input-custom-duration\"\n            />\n            <Button \n              onClick={handleCustomDuration}\n              disabled={!customDays || parseInt(customDays) <= 0}\n              data-testid=\"button-set-custom-duration\"\n            >\n              Set\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}","size_bytes":3219},"client/src/components/WeatherSuggestion.tsx":{"content":"import { Cloud, Sun, CloudRain, Wind, Loader2 } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getWeatherSuggestions } from \"@/lib/api\";\n\ninterface WeatherDay {\n  dateRange: string;\n  condition: string;\n  temperature: number;\n  icon: React.ReactNode;\n  score: number;\n  description: string;\n}\n\ninterface WeatherSuggestionProps {\n  destination: string;\n  onDateSelect: (date: string) => void;\n}\n\nexport function WeatherSuggestion({ destination, onDateSelect }: WeatherSuggestionProps) {\n  const { data: weatherData, isLoading, error } = useQuery({\n    queryKey: [\"weather\", destination],\n    queryFn: () => getWeatherSuggestions(destination, 7),\n    enabled: !!destination,\n  });\n\n  const getWeatherIcon = (condition: string) => {\n    const conditionLower = condition.toLowerCase();\n    if (conditionLower.includes(\"sunny\") || conditionLower.includes(\"clear\")) {\n      return <Sun className=\"h-4 w-4\" />;\n    }\n    if (conditionLower.includes(\"cloud\")) {\n      return <Cloud className=\"h-4 w-4\" />;\n    }\n    if (conditionLower.includes(\"rain\")) {\n      return <CloudRain className=\"h-4 w-4\" />;\n    }\n    if (conditionLower.includes(\"snow\")) {\n      return <Wind className=\"h-4 w-4\" />;\n    }\n    return <Wind className=\"h-4 w-4\" />;\n  };\n\n  const weatherDays: WeatherDay[] = (weatherData?.recommendations || []).map((rec: any) => ({\n    dateRange: rec.dateRange,\n    condition: rec.condition,\n    temperature: rec.temperature,\n    icon: getWeatherIcon(rec.condition),\n    score: rec.score,\n    description: rec.description\n  })) || [];\n\n  const getScoreColor = (score: number) => {\n    if (score >= 90) return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n    if (score >= 75) return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n    return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-2\">\n        <Sun className=\"h-5 w-5 text-yellow-500\" />\n        <h3 className=\"text-lg font-semibold\">Best Days to Travel</h3>\n      </div>\n      \n      <p className=\"text-sm text-muted-foreground\">\n        AI-optimized weather windows for {destination}\n      </p>\n\n      {isLoading ? (\n        <div className=\"text-center py-6\">\n          <Loader2 className=\"h-6 w-6 animate-spin mx-auto mb-2\" />\n          <p className=\"text-sm text-muted-foreground\">Loading weather recommendations...</p>\n        </div>\n      ) : error ? (\n        <div className=\"text-center py-6\">\n          <p className=\"text-sm text-muted-foreground\">Unable to load weather data. Using default suggestions.</p>\n        </div>\n      ) : (\n        <div className=\"grid gap-3\">\n          {weatherDays.map((day, index) => (\n            <Card \n              key={index} \n              className=\"p-4 hover-elevate cursor-pointer\"\n              onClick={() => {\n                onDateSelect(day.dateRange);\n                console.log(\"Selected travel dates:\", day.dateRange);\n              }}\n              data-testid={`weather-option-${index}`}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 rounded-md bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-200\">\n                    {day.icon}\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">{day.dateRange}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{day.condition}</p>\n                  </div>\n                </div>\n                \n                <div className=\"text-right\">\n                  <div className=\"text-lg font-semibold\">{day.temperature}°C</div>\n                  <Badge \n                    className={`text-xs ${getScoreColor(day.score)}`}\n                  >\n                    {day.score}% Perfect\n                  </Badge>\n                </div>\n              </div>\n              \n              {index === 0 && (\n                <div className=\"mt-3 pt-3 border-t border-border\">\n                  <Badge variant=\"default\" className=\"text-xs\">\n                    🏆 Recommended by AI\n                  </Badge>\n                </div>\n              )}\n            </Card>\n          ))}\n        </div>\n      )}\n\n      <Button \n        variant=\"outline\" \n        className=\"w-full\"\n        onClick={() => console.log(\"Manual date selection requested\")}\n        data-testid=\"button-manual-date-select\"\n      >\n        I'll choose my own dates\n      </Button>\n    </div>\n  );\n}","size_bytes":4752},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\n// Trip API endpoints\nexport interface CreateTripRequest {\n  destination: string;\n  duration: number;\n  moods: string[];\n  budget?: string;\n  startDate?: string;\n  endDate?: string;\n  status?: string;\n}\n\nexport interface Trip {\n  id: string;\n  userId: string | null;\n  destination: string;\n  duration: number;\n  moods: string[];\n  budget: string | null;\n  startDate: string | null;\n  endDate: string | null;\n  status: string;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n}\n\nexport interface Activity {\n  id: string;\n  time: string;\n  title: string;\n  location: string;\n  duration: string;\n  cost: number;\n  type: string;\n  description: string;\n}\n\nexport interface Itinerary {\n  id: string;\n  tripId: string;\n  day: number;\n  date: string;\n  activities: Activity[];\n  totalCost: string;\n  createdAt: Date | null;\n}\n\nexport interface WeatherSuggestion {\n  dateRange: string;\n  condition: string;\n  temperature: number;\n  score: number;\n  description: string;\n}\n\n// API functions\nexport async function createTrip(tripData: CreateTripRequest): Promise<Trip> {\n  return apiRequest(\"/api/trips\", {\n    method: \"POST\",\n    body: JSON.stringify(tripData),\n  });\n}\n\nexport async function getTrip(tripId: string): Promise<Trip> {\n  return apiRequest(`/api/trips/${tripId}`);\n}\n\nexport async function getTripItineraries(tripId: string): Promise<Itinerary[]> {\n  return apiRequest(`/api/trips/${tripId}/itineraries`);\n}\n\nexport async function generateItinerary(tripId: string) {\n  return apiRequest(`/api/trips/${tripId}/generate-itinerary`, {\n    method: \"POST\",\n  });\n}\n\nexport async function getWeatherSuggestions(destination: string, duration: number = 7) {\n  return apiRequest(`/api/destinations/${encodeURIComponent(destination)}/best-dates?duration=${duration}`);\n}\n\nexport async function searchDestinations(query: string) {\n  if (query.length < 2) {\n    return { suggestions: [] };\n  }\n  return apiRequest(`/api/destinations/search?query=${encodeURIComponent(query)}`);\n}\n\nexport async function generatePlanB(activity: Activity, reason: string) {\n  return apiRequest(\"/api/activities/plan-b\", {\n    method: \"POST\",\n    body: JSON.stringify({ activity, reason }),\n  });\n}\n\nexport async function createBooking(tripId: string, bookingData: any) {\n  return apiRequest(`/api/trips/${tripId}/bookings`, {\n    method: \"POST\",\n    body: JSON.stringify(bookingData),\n  });\n}","size_bytes":2413},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options?: {\n    method?: string;\n    body?: string;\n  }\n): Promise<any> {\n  const res = await fetch(url, {\n    method: options?.method || \"GET\",\n    headers: options?.body ? { \"Content-Type\": \"application/json\" } : {},\n    body: options?.body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1404},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { HeroSection } from \"@/components/HeroSection\";\nimport { MoodSelector } from \"@/components/MoodSelector\";\nimport { TripDurationPicker } from \"@/components/TripDurationPicker\"; \nimport { WeatherSuggestion } from \"@/components/WeatherSuggestion\";\nimport { BudgetEstimator } from \"@/components/BudgetEstimator\";\nimport { ItineraryDisplay } from \"@/components/ItineraryDisplay\";\nimport { DestinationCard } from \"@/components/DestinationCard\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Sparkles, Users, Download, Loader2 } from \"lucide-react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { createTrip, generateItinerary, getTrip, getTripItineraries, type Trip, type Itinerary } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport cultureImage from \"@assets/generated_images/Cultural_heritage_destination_card_7c712f33.png\";\nimport adventureImage from \"@assets/generated_images/Adventure_travel_destination_card_8cbc5aee.png\";\nimport relaxImage from \"@assets/generated_images/Relaxation_spa_destination_card_c8d484c2.png\";\n\ntype PlanningStep = \"hero\" | \"preferences\" | \"suggestions\" | \"itinerary\";\n\nexport default function Home() {\n  const [currentStep, setCurrentStep] = useState<PlanningStep>(\"hero\");\n  const [selectedDestination, setSelectedDestination] = useState(\"\");\n  const [selectedMoods, setSelectedMoods] = useState<string[]>([]);\n  const [tripDuration, setTripDuration] = useState(7);\n  const [selectedDates, setSelectedDates] = useState(\"\");\n  const [estimatedBudget, setEstimatedBudget] = useState(0);\n  const [currentTripId, setCurrentTripId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // React Query hooks for API calls\n  const { data: currentTrip } = useQuery({\n    queryKey: [\"trip\", currentTripId],\n    queryFn: () => getTrip(currentTripId!),\n    enabled: !!currentTripId,\n  });\n\n  const { data: itineraries = [] } = useQuery({\n    queryKey: [\"itineraries\", currentTripId],\n    queryFn: () => getTripItineraries(currentTripId!),\n    enabled: !!currentTripId,\n  });\n\n  const createTripMutation = useMutation({\n    mutationFn: createTrip,\n    onSuccess: (trip) => {\n      setCurrentTripId(trip.id);\n      toast({\n        title: \"Trip Created!\",\n        description: `Your ${trip.destination} trip has been created.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create trip. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateItineraryMutation = useMutation({\n    mutationFn: generateItinerary,\n    onSuccess: () => {\n      setCurrentStep(\"itinerary\");\n      toast({\n        title: \"Itinerary Generated!\",\n        description: \"Your personalized AI itinerary is ready.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to generate itinerary. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const featuredDestinations = [\n    {\n      id: \"culture\",\n      name: \"Cultural Heritage\",\n      image: cultureImage,\n      description: \"Explore ancient temples and traditional architecture\",\n      rating: 4.8,\n      duration: \"5-7 days\",\n      price: 850,\n      mood: \"Culture\"\n    },\n    {\n      id: \"adventure\",\n      name: \"Mountain Adventure\", \n      image: adventureImage,\n      description: \"Thrilling outdoor activities and scenic trekking\",\n      rating: 4.9,\n      duration: \"7-10 days\",\n      price: 1200,\n      mood: \"Adventure\"\n    },\n    {\n      id: \"relax\",\n      name: \"Wellness Retreat\",\n      image: relaxImage,\n      description: \"Peaceful spa treatments and meditation experiences\",\n      rating: 4.7,\n      duration: \"4-6 days\", \n      price: 950,\n      mood: \"Relax\"\n    }\n  ];\n\n  const handleDestinationSelect = (destination: string) => {\n    setSelectedDestination(destination);\n    setCurrentStep(\"preferences\");\n    console.log(\"Starting planning for:\", destination);\n  };\n\n  const handleMoodToggle = (moodId: string) => {\n    setSelectedMoods(prev => \n      prev.includes(moodId) \n        ? prev.filter(id => id !== moodId)\n        : [...prev, moodId]\n    );\n  };\n\n  const handleGenerateItinerary = async () => {\n    try {\n      // First create the trip\n      const tripData = {\n        destination: selectedDestination,\n        duration: tripDuration,\n        moods: selectedMoods,\n        budget: estimatedBudget > 0 ? estimatedBudget.toString() : undefined,\n        startDate: selectedDates || undefined,\n        status: \"planning\",\n      };\n      \n      const trip = await createTripMutation.mutateAsync(tripData);\n      \n      // Then generate the AI itinerary\n      await generateItineraryMutation.mutateAsync(trip.id);\n    } catch (error) {\n      console.error(\"Error in trip planning flow:\", error);\n    }\n  };\n\n  const handleBookNow = () => {\n    console.log(\"Initiating booking process\");\n    if (currentTrip) {\n      toast({\n        title: \"🎉 Booking Initiated!\",\n        description: `Your ${currentTrip.destination} trip is ready for booking. Payment integration coming soon!`,\n      });\n    }\n  };\n\n  const handleBackToSearch = () => {\n    setCurrentStep(\"hero\");\n    setSelectedDestination(\"\");\n    setSelectedMoods([]);\n    setTripDuration(7);\n    setSelectedDates(\"\");\n    setEstimatedBudget(0);\n    setCurrentTripId(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container flex h-16 items-center justify-between px-6\">\n          <div className=\"flex items-center gap-2\">\n            <Sparkles className=\"h-6 w-6 text-primary\" />\n            <span className=\"text-xl font-bold\">TripCraft</span>\n            <Badge variant=\"secondary\" className=\"text-xs\">AI-Powered</Badge>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            {currentStep !== \"hero\" && (\n              <Button \n                variant=\"ghost\" \n                onClick={handleBackToSearch}\n                data-testid=\"button-back-to-search\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Search\n              </Button>\n            )}\n            <ThemeToggle />\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main>\n        {currentStep === \"hero\" && (\n          <div className=\"space-y-12\">\n            <HeroSection onGetStarted={handleDestinationSelect} />\n            \n            {/* Featured Destinations */}\n            <section className=\"container px-6 py-12\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-bold mb-4\">Popular Experiences</h2>\n                <p className=\"text-muted-foreground\">Curated trips based on different travel moods</p>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n                {featuredDestinations.map(dest => (\n                  <DestinationCard\n                    key={dest.id}\n                    {...dest}\n                    onClick={() => handleDestinationSelect(dest.name)}\n                  />\n                ))}\n              </div>\n            </section>\n          </div>\n        )}\n\n        {currentStep === \"preferences\" && (\n          <div className=\"container px-6 py-12 max-w-4xl mx-auto\">\n            <div className=\"space-y-8\">\n              <div className=\"text-center\">\n                <h1 className=\"text-3xl font-bold mb-2\">Customize Your {selectedDestination} Trip</h1>\n                <p className=\"text-muted-foreground\">Tell us your preferences for a personalized experience</p>\n              </div>\n\n              <div className=\"space-y-8\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                  <Card className=\"p-6\">\n                    <MoodSelector \n                      selectedMoods={selectedMoods} \n                      onMoodToggle={handleMoodToggle} \n                    />\n                  </Card>\n\n                  <Card className=\"p-6\">\n                    <TripDurationPicker \n                      duration={tripDuration}\n                      onDurationChange={setTripDuration}\n                    />\n                  </Card>\n                </div>\n\n                <Card className=\"p-6\">\n                  <BudgetEstimator\n                    destination={selectedDestination}\n                    duration={tripDuration}\n                    moods={selectedMoods}\n                    onBudgetChange={setEstimatedBudget}\n                  />\n                </Card>\n\n                <Card className=\"p-6\">\n                  <WeatherSuggestion \n                    destination={selectedDestination}\n                    onDateSelect={setSelectedDates}\n                  />\n                </Card>\n              </div>\n\n              <div className=\"text-center\">\n                <Button \n                  onClick={handleGenerateItinerary}\n                  disabled={selectedMoods.length === 0 || createTripMutation.isPending || generateItineraryMutation.isPending}\n                  className=\"px-8 py-3 text-lg\"\n                  data-testid=\"button-generate-itinerary\"\n                >\n                  {(createTripMutation.isPending || generateItineraryMutation.isPending) ? (\n                    <>\n                      <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" />\n                      Generating AI Itinerary...\n                    </>\n                  ) : (\n                    <>\n                      <Sparkles className=\"h-5 w-5 mr-2\" />\n                      Generate AI Itinerary\n                    </>\n                  )}\n                </Button>\n                {selectedMoods.length === 0 && (\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Please select at least one travel mood to continue\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {currentStep === \"itinerary\" && currentTrip && (\n          <div className=\"container px-6 py-12 max-w-6xl mx-auto\">\n            {itineraries.length > 0 ? (\n              <ItineraryDisplay\n                destination={currentTrip.destination}\n                days={itineraries.map(itinerary => ({\n                  day: itinerary.day,\n                  date: itinerary.date,\n                  activities: itinerary.activities,\n                  totalCost: parseFloat(itinerary.totalCost)\n                }))}\n                totalBudget={parseFloat(currentTrip.budget || \"0\")}\n                onBookNow={handleBookNow}\n                onModifyItinerary={() => setCurrentStep(\"preferences\")}\n              />\n            ) : (\n              <div className=\"text-center py-12\">\n                <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n                <p className=\"text-lg\">Loading your personalized itinerary...</p>\n              </div>\n            )}\n\n            {/* Additional Features */}\n            <div className=\"mt-12 grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card className=\"p-6 text-center hover-elevate\">\n                <Users className=\"h-8 w-8 mx-auto mb-3 text-blue-500\" />\n                <h3 className=\"font-semibold mb-2\">Collaborative Planning</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Invite friends and plan together\n                </p>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => console.log(\"Group planning\")}>\n                  Coming Soon\n                </Button>\n              </Card>\n\n              <Card className=\"p-6 text-center hover-elevate\">\n                <Download className=\"h-8 w-8 mx-auto mb-3 text-green-500\" />\n                <h3 className=\"font-semibold mb-2\">Offline Access</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Download for offline use\n                </p>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => console.log(\"Offline download\")}>\n                  Download\n                </Button>\n              </Card>\n\n              <Card className=\"p-6 text-center hover-elevate\">\n                <Sparkles className=\"h-8 w-8 mx-auto mb-3 text-purple-500\" />\n                <h3 className=\"font-semibold mb-2\">AI Plan B</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Real-time adaptive suggestions\n                </p>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => console.log(\"AI Plan B\")}>\n                  Enable\n                </Button>\n              </Card>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":13068},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/DestinationCard.tsx":{"content":"import { DestinationCard } from '../DestinationCard';\nimport cultureImage from \"@assets/generated_images/Cultural_heritage_destination_card_7c712f33.png\";\nimport adventureImage from \"@assets/generated_images/Adventure_travel_destination_card_8cbc5aee.png\";\nimport relaxImage from \"@assets/generated_images/Relaxation_spa_destination_card_c8d484c2.png\";\n\nexport default function DestinationCardExample() {\n  const destinations = [\n    {\n      id: \"1\",\n      name: \"Cultural Heritage Tour\",\n      image: cultureImage,\n      description: \"Explore ancient temples and traditional architecture with local guides\",\n      rating: 4.8,\n      duration: \"5 days\",\n      price: 850,\n      mood: \"Culture\"\n    },\n    {\n      id: \"2\", \n      name: \"Mountain Adventure\",\n      image: adventureImage,\n      description: \"Thrilling trekking and outdoor activities in stunning landscapes\",\n      rating: 4.9,\n      duration: \"7 days\", \n      price: 1200,\n      mood: \"Adventure\"\n    },\n    {\n      id: \"3\",\n      name: \"Wellness Retreat\",\n      image: relaxImage, \n      description: \"Peaceful spa treatments and meditation in serene natural settings\",\n      rating: 4.7,\n      duration: \"4 days\",\n      price: 950,\n      mood: \"Relax\"\n    }\n  ];\n\n  return (\n    <div className=\"p-6 grid grid-cols-1 md:grid-cols-3 gap-6 max-w-6xl\">\n      {destinations.map(dest => (\n        <DestinationCard\n          key={dest.id}\n          {...dest}\n          onClick={(id) => console.log('Destination clicked:', id)}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":1525},"client/src/components/examples/DestinationSearch.tsx":{"content":"import { DestinationSearch } from '../DestinationSearch';\n\nexport default function DestinationSearchExample() {\n  return (\n    <div className=\"p-6 max-w-md\">\n      <DestinationSearch onDestinationSelect={(destination) => console.log('Selected:', destination)} />\n    </div>\n  );\n}","size_bytes":280},"client/src/components/examples/HeroSection.tsx":{"content":"import { HeroSection } from '../HeroSection';\n\nexport default function HeroSectionExample() {\n  return (\n    <HeroSection onGetStarted={(destination) => console.log('Getting started with:', destination)} />\n  );\n}","size_bytes":213},"client/src/components/examples/ItineraryDisplay.tsx":{"content":"import { ItineraryDisplay } from '../ItineraryDisplay';\n\nexport default function ItineraryDisplayExample() {\n  const mockDays = [\n    {\n      day: 1,\n      date: \"Sept 15, 2024\",\n      totalCost: 280,\n      activities: [\n        {\n          id: \"1\",\n          time: \"9:00 AM\",\n          title: \"Eiffel Tower Visit\",\n          location: \"Champ de Mars, Paris\",\n          duration: \"2 hours\",\n          cost: 25,\n          type: \"Culture\",\n          description: \"Skip-the-line tickets to the iconic Eiffel Tower with audio guide\"\n        },\n        {\n          id: \"2\", \n          time: \"2:00 PM\",\n          title: \"Seine River Cruise\",\n          location: \"Port de la Bourdonnais\",\n          duration: \"1.5 hours\", \n          cost: 35,\n          type: \"Relaxation\",\n          description: \"Scenic boat cruise along the Seine with commentary\"\n        },\n        {\n          id: \"3\",\n          time: \"7:00 PM\", \n          title: \"Traditional French Dinner\",\n          location: \"Le Marais District\",\n          duration: \"2 hours\",\n          cost: 85,\n          type: \"Food\",\n          description: \"Authentic French cuisine at a local bistro\"\n        }\n      ]\n    },\n    {\n      day: 2,\n      date: \"Sept 16, 2024\", \n      totalCost: 320,\n      activities: [\n        {\n          id: \"4\",\n          time: \"10:00 AM\",\n          title: \"Louvre Museum\",\n          location: \"Rue de Rivoli, Paris\",\n          duration: \"3 hours\",\n          cost: 45,\n          type: \"Culture\", \n          description: \"World's largest art museum featuring the Mona Lisa\"\n        },\n        {\n          id: \"5\",\n          time: \"3:00 PM\",\n          title: \"Montmartre Walking Tour\", \n          location: \"Montmartre, Paris\",\n          duration: \"2 hours\",\n          cost: 25,\n          type: \"Adventure\",\n          description: \"Explore the artistic district of Montmartre and Sacré-Cœur\"\n        }\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <ItineraryDisplay\n        destination=\"Paris, France\"\n        days={mockDays}\n        totalBudget={1250}\n        onBookNow={() => console.log('Booking initiated')}\n        onModifyItinerary={() => console.log('Modifying itinerary')}\n      />\n    </div>\n  );\n}","size_bytes":2209},"client/src/components/examples/MoodSelector.tsx":{"content":"import { MoodSelector } from '../MoodSelector';\nimport { useState } from 'react';\n\nexport default function MoodSelectorExample() {\n  const [selectedMoods, setSelectedMoods] = useState<string[]>(['relax']);\n\n  const handleMoodToggle = (moodId: string) => {\n    setSelectedMoods(prev => \n      prev.includes(moodId) \n        ? prev.filter(id => id !== moodId)\n        : [...prev, moodId]\n    );\n  };\n\n  return (\n    <div className=\"p-6 max-w-2xl\">\n      <MoodSelector selectedMoods={selectedMoods} onMoodToggle={handleMoodToggle} />\n    </div>\n  );\n}","size_bytes":548},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return <ThemeToggle />;\n}","size_bytes":121},"client/src/components/examples/TripDurationPicker.tsx":{"content":"import { TripDurationPicker } from '../TripDurationPicker';\nimport { useState } from 'react';\n\nexport default function TripDurationPickerExample() {\n  const [duration, setDuration] = useState(7);\n\n  return (\n    <div className=\"p-6 max-w-2xl\">\n      <TripDurationPicker duration={duration} onDurationChange={setDuration} />\n    </div>\n  );\n}","size_bytes":341},"client/src/components/examples/WeatherSuggestion.tsx":{"content":"import { WeatherSuggestion } from '../WeatherSuggestion';\n\nexport default function WeatherSuggestionExample() {\n  return (\n    <div className=\"p-6 max-w-md\">\n      <WeatherSuggestion \n        destination=\"Paris, France\" \n        onDateSelect={(date) => console.log('Selected dates:', date)} \n      />\n    </div>\n  );\n}","size_bytes":318},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/BudgetEstimator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { DollarSign, Info, Calculator, TrendingUp } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\n\ninterface BudgetEstimatorProps {\n  destination: string;\n  duration: number;\n  moods: string[];\n  onBudgetChange: (budget: number) => void;\n}\n\ninterface BudgetBreakdown {\n  accommodation: number;\n  activities: number;\n  food: number;\n  transport: number;\n  hiddenCosts: {\n    localTransport: number;\n    tips: number;\n    fees: number;\n    simCard: number;\n    insurance: number;\n    emergency: number;\n  };\n  total: number;\n}\n\nexport function BudgetEstimator({ destination, duration, moods, onBudgetChange }: BudgetEstimatorProps) {\n  const [budgetRange, setBudgetRange] = useState(\"moderate\");\n  const [customBudget, setCustomBudget] = useState(1000);\n  const [showBreakdown, setShowBreakdown] = useState(false);\n  const [breakdown, setBreakdown] = useState<BudgetBreakdown | null>(null);\n\n  const budgetRanges = {\n    budget: { min: 50, max: 100, label: \"Budget\", color: \"bg-green-100 text-green-800\" },\n    moderate: { min: 100, max: 250, label: \"Moderate\", color: \"bg-blue-100 text-blue-800\" },\n    luxury: { min: 250, max: 500, label: \"Luxury\", color: \"bg-purple-100 text-purple-800\" },\n    custom: { min: 50, max: 2000, label: \"Custom\", color: \"bg-orange-100 text-orange-800\" }\n  };\n\n  const calculateBudgetBreakdown = (baseBudget: number): BudgetBreakdown => {\n    // Base percentages for different categories\n    let accommodationRate = 0.35;\n    let activitiesRate = 0.25;\n    let foodRate = 0.25;\n    let transportRate = 0.15;\n\n    // Adjust rates based on travel moods\n    if (moods.includes(\"luxury\") || moods.includes(\"relax\")) {\n      accommodationRate = 0.45;\n      foodRate = 0.30;\n      activitiesRate = 0.15;\n    } else if (moods.includes(\"adventure\")) {\n      activitiesRate = 0.35;\n      accommodationRate = 0.25;\n      transportRate = 0.25;\n    } else if (moods.includes(\"culture\")) {\n      activitiesRate = 0.30;\n      foodRate = 0.30;\n    }\n\n    // Calculate base costs\n    const accommodation = baseBudget * accommodationRate;\n    const activities = baseBudget * activitiesRate;\n    const food = baseBudget * foodRate;\n    const transport = baseBudget * transportRate;\n\n    // Calculate hidden costs based on destination and duration\n    const isInternational = !destination.toLowerCase().includes(\"usa\") && \n                           !destination.toLowerCase().includes(\"united states\");\n    \n    const hiddenCosts = {\n      localTransport: Math.max(20, duration * 8), // $8-15 per day for local transport\n      tips: Math.max(30, baseBudget * 0.05), // 5% of budget for tips\n      fees: isInternational ? 150 : 50, // Higher fees for international (visas, etc.)\n      simCard: isInternational ? 50 : 25, // International roaming/local SIM\n      insurance: Math.max(50, duration * 5), // Travel insurance\n      emergency: Math.max(100, baseBudget * 0.10) // 10% emergency buffer\n    };\n\n    const hiddenTotal = Object.values(hiddenCosts).reduce((sum, cost) => sum + cost, 0);\n    const total = accommodation + activities + food + transport + hiddenTotal;\n\n    return {\n      accommodation,\n      activities,\n      food,\n      transport,\n      hiddenCosts,\n      total\n    };\n  };\n\n  const getBudgetForRange = (range: string): number => {\n    if (range === \"custom\") return customBudget;\n    const config = budgetRanges[range as keyof typeof budgetRanges];\n    return ((config.min + config.max) / 2) * duration;\n  };\n\n  useEffect(() => {\n    const budget = getBudgetForRange(budgetRange);\n    const calculatedBreakdown = calculateBudgetBreakdown(budget);\n    setBreakdown(calculatedBreakdown);\n    setShowBreakdown(true); // Show breakdown by default after calculation\n    onBudgetChange(calculatedBreakdown.total);\n  }, [budgetRange, customBudget, destination, duration, moods, onBudgetChange]);\n\n  const handleRangeSelect = (range: string) => {\n    setBudgetRange(range);\n    setShowBreakdown(true);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-2\">\n        <DollarSign className=\"h-5 w-5 text-green-500\" />\n        <h3 className=\"text-lg font-semibold\">Dynamic Budget Estimator</h3>\n      </div>\n      \n      <p className=\"text-sm text-muted-foreground\">\n        AI-powered budget estimation including hidden costs for {destination}\n      </p>\n\n      {/* Budget Range Selection */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n        {Object.entries(budgetRanges).map(([key, config]) => (\n          <Card\n            key={key}\n            className={`p-4 cursor-pointer transition-all hover-elevate ${\n              budgetRange === key \n                ? \"border-primary bg-primary/5\" \n                : \"border-border\"\n            }`}\n            onClick={() => handleRangeSelect(key)}\n            data-testid={`budget-range-${key}`}\n          >\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Calculator className=\"h-4 w-4 text-muted-foreground\" />\n              </div>\n              <h4 className=\"font-medium\">{config.label}</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                {key === \"custom\" ? \"Set your own\" : `$${config.min}-${config.max}/day`}\n              </p>\n              {budgetRange === key && (\n                <Badge variant=\"default\" className=\"mt-2 text-xs\">\n                  Selected\n                </Badge>\n              )}\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {/* Custom Budget Slider */}\n      {budgetRange === \"custom\" && (\n        <Card className=\"p-4\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"font-medium\">Custom Budget</h4>\n              <div className=\"text-lg font-bold text-primary\">\n                ${customBudget * duration}\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Slider\n                value={[customBudget]}\n                onValueChange={(value) => setCustomBudget(value[0])}\n                max={2000}\n                min={50}\n                step={25}\n                className=\"w-full\"\n              />\n              <div className=\"flex justify-between text-sm text-muted-foreground\">\n                <span>$50/day</span>\n                <span>$2000/day</span>\n              </div>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Budget Breakdown */}\n      {breakdown && showBreakdown && (\n        <Card className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"font-semibold\">Smart Budget Breakdown</h4>\n              <div className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                <span className=\"text-lg font-bold text-primary\">\n                  ${Math.round(breakdown.total)}\n                </span>\n              </div>\n            </div>\n\n            {/* Main Categories */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n              <div>\n                <div className=\"text-lg font-bold text-blue-600\">\n                  ${Math.round(breakdown.accommodation)}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Accommodation</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-green-600\">\n                  ${Math.round(breakdown.activities)}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Activities</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-orange-600\">\n                  ${Math.round(breakdown.food)}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Food</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-purple-600\">\n                  ${Math.round(breakdown.transport)}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Transport</div>\n              </div>\n            </div>\n\n            {/* Hidden Costs Section */}\n            <div className=\"border-t pt-4\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Info className=\"h-4 w-4 text-amber-500\" />\n                <h5 className=\"font-medium text-amber-700\">Hidden Costs Included</h5>\n              </div>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Local Transport:</span>\n                  <span className=\"font-medium\">${Math.round(breakdown.hiddenCosts.localTransport)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Tips & Service:</span>\n                  <span className=\"font-medium\">${Math.round(breakdown.hiddenCosts.tips)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Fees & Visas:</span>\n                  <span className=\"font-medium\">${Math.round(breakdown.hiddenCosts.fees)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>SIM/Data:</span>\n                  <span className=\"font-medium\">${Math.round(breakdown.hiddenCosts.simCard)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Insurance:</span>\n                  <span className=\"font-medium\">${Math.round(breakdown.hiddenCosts.insurance)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Emergency Buffer:</span>\n                  <span className=\"font-medium\">${Math.round(breakdown.hiddenCosts.emergency)}</span>\n                </div>\n              </div>\n              <div className=\"mt-3 pt-3 border-t\">\n                <div className=\"flex justify-between font-semibold\">\n                  <span>Total Hidden Costs:</span>\n                  <span className=\"text-amber-600\">\n                    +${Math.round(Object.values(breakdown.hiddenCosts).reduce((sum, cost) => sum + cost, 0))}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-muted/50 p-3 rounded-md\">\n              <p className=\"text-sm text-muted-foreground\">\n                This budget includes all the costs most travelers forget: local transportation, \n                mandatory tips, visa fees, international SIM cards, travel insurance, and a safety buffer. \n                No surprises on your trip!\n              </p>\n            </div>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":11086}},"version":1}